name: release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '30 11 * * 1'
env:
  CACHE_IAMGE_TAG: ${{ github.sha }}
  CACHE_IAMGE_NAME: ./image-cache/cat_${{ github.sha }}.tar
jobs:
  build:
    permissions:
      contents: read
    name: Build
    runs-on: production
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          architecture: 'arm'
      - name: Run1
        run: |
          type mvn
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.3
        with:
          maven-version: 3.8.5
      - name: Run Tests
        run: ls -l /opt/hostedtoolcache/maven/3.8.5
      - name: Run2
        run: |
          type mvn
      - name: Run Tests
        run: mvn test
      - name: Build with Mavn
        run: mvn -B package --file pom.xml -Dmaven.test.skip=true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - run: mkdir -p ./image-cache
      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ env.CACHE_IAMGE_TAG }}
          outputs: type=docker,dest=${{ env.CACHE_IAMGE_NAME }}
      - id: image-cache
        uses: actions/cache@v2
        with:
          path: ./image-cache
          key: image-cache-${{ github.sha }}
  analyze:
    name: Analyze-CodeQL
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
  security:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    name: Security
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - id: image-cache
        uses: actions/cache@v2
        with:
          path: ./image-cache
          key: image-cache-${{ github.sha }}
      - run: ls -al ./image-cache
      - name: Load image
        run: |
          docker load --input ${{ env.CACHE_IAMGE_NAME }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@2a2157eb22c08c9a1fac99263430307b8d1bc7a2
        with:
          image-ref: ${{ env.CACHE_IAMGE_TAG }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      - uses: actions/checkout@v3
      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.CACHE_IAMGE_TAG }}
          args: --file=Dockerfile
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
  publish:
    name: Publish Image
    runs-on: ubuntu-latest
    needs:
      - analyze
      - security
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download artifact
        uses: actions/download-artifact@v2
      - name: Load image
        run: |
          docker load --input artifacts/${{ env.CACHE_IAMGE_NAME }}
      - name: Check out code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ssr-devsecops-cat
        run: |
          docker tag ${{ env.CACHE_IAMGE_TAG }} $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_IAMGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_IAMGE_TAG
